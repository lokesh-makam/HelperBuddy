generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String           @id
  email             String           @unique
  firstName         String
  lastName          String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  walletBalance     Int              @default(100)
  referralCode      String           @unique @default(uuid())
  role              String           @default("user")
  address           Address[]
  referralsReceived Referral?        @relation("Referee")
  referralsSent     Referral[]       @relation("Referrer")
  servicePartner    ServicePartner?
  requests          ServiceRequest[]
}

model ServicePartner {
  id                     String                  @id @default(cuid())
  userId                 String                  @unique
  experience             Int
  fullName               String
  email                  String                  @unique
  phone                  String
  address                String
  totalServicesCompleted Int                     @default(0)
  rating                 Int                     @default(0)
  pendingServices        Int                     @default(0)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  bio                    String?
  status                 String                  @default("pending")
  upi                    String?
  serviceAreas           String
  idCard                 String?
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  servicePartnerServices ServicePartnerService[]
  serviceRequests        ServiceRequest[]
}

model ServicePartnerService {
  id               String         @id @default(cuid())
  servicePartnerId String
  serviceId        String
  status           String         @default("pending")
  createdAt        DateTime       @default(now())
  service          Service        @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  servicePartner   ServicePartner @relation(fields: [servicePartnerId], references: [id], onDelete: Cascade)
}

model Service {
  id                     String                  @id @default(cuid())
  name                   String
  description            String?
  category               String
  basePrice              Int
  estimatedTime          String?
  rating                 Float                   @default(0)
  includes               String?
  imageUrl               String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  servicePartnerServices ServicePartnerService[]
  requests               ServiceRequest[]
}

model ServiceRequest {
  id                 String          @id @default(cuid())
  userId             String
  serviceId          String
  servicePartnerId   String?
  status             String          @default("pending")
  firstName          String
  lastName           String
  email              String
  phone              String
  acceptedByProvider Boolean         @default(false)
  acceptedAt         DateTime?
  completedAt        DateTime?
  completionstatus   String          @default("pending")
  paymentStatus      String          @default("pending")
  paymentMethod      String
  cancellationReason String?
  cancelledAt        DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  houseNo            String
  street             String
  city               String
  state              String
  postalCode         String
  country            String
  addressType        String
  serviceDate        DateTime
  serviceTime        String
  cartTotal          Int
  tax                Int
  shippingCost       Int
  orderTotal         Int
  walletBalance      Int
  walletAmountUsed   Int
  amountToPay        Int
  useWallet          Boolean
  Review             Review[]
  service            Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  servicePartner     ServicePartner? @relation(fields: [servicePartnerId], references: [id], onDelete: Cascade)
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id          String      @id @default(cuid())
  houseNo     String
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  default     Boolean
  addressType AddressType
  userId      String
  User        User        @relation(fields: [userId], references: [id])
}

model Referral {
  id           String   @id @default(cuid())
  referrerId   String
  refereeId    String   @unique
  rewardAmount Int      @default(50)
  isCompleted  Boolean  @default(false)
  createdAt    DateTime @default(now())
  referee      User     @relation("Referee", fields: [refereeId], references: [id])
  referrer     User     @relation("Referrer", fields: [referrerId], references: [id])
}

model Review {
  id               String          @id @default(cuid())
  serviceRequestId String
  rating           Int
  review           String
  status           String          @default("false")
  createdAt        DateTime        @default(now())
  homepageReview   HomepageReview?
  serviceRequest   ServiceRequest  @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
}

model Blog {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(255)
  excerpt     String
  content     String
  image       String
  authorName  String
  authorBio   String
  tags        String
  category    String
  readTime    String
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model HomepageReview {
  reviewId  String   @unique
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id])
}

enum AddressType {
  HOME
  OFFICE
  OTHER
}
