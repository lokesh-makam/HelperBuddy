generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id
  email             String           @unique
  firstName         String
  lastName          String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  walletBalance     Int              @default(100) // Wallet balance in currency
  referralCode      String           @unique @default(uuid()) // Unique referral code for each user
  requests          ServiceRequest[]
  servicePartner    ServicePartner?
  address           Address[]
  referralsSent     Referral[]       @relation("Referrer") // Users this user referred
  referralsReceived Referral?        @relation("Referee") // Users who referred this user
}

model ServicePartner {
  id                     String           @id @default(cuid())
  user                   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String           @unique
  experience             Int
  fullName               String
  email                  String
  phone                  String
  address                String
  totalServicesCompleted Int              @default(0)
  rating                 Int              @default(0)
  pendingServices        Int              @default(0)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  bio                    String?
  status                 String           @default("pending")
  upi                    String?
  serviceAreas           String[]
  idCard                 String? // URL of the uploaded ID card
  serviceRequests        ServiceRequest[]
}

model Service {
  id            String           @id @default(cuid())
  name          String
  description   String?
  category      String
  basePrice     Int
  estimatedTime String?
  rating        Int?
  imageUrl      String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  requests      ServiceRequest[] // Requests for this service
}

model ServiceRequest {
  id               String          @id @default(cuid())
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  service          Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId        String
  servicePartner   ServicePartner? @relation(fields: [servicePartnerId], references: [id], onDelete: Cascade) // Fixed Relation
  servicePartnerId String?
  status           String          @default("Pending")

  firstName  String
  lastName   String
  email      String
  phone      String
  address    String
  city       String
  state      String
  postalCode String
  amount     Int

  preferredDate DateTime?
  preferredTime String?

  acceptedByProvider Boolean   @default(false)
  acceptedAt         DateTime?
  completedAt        DateTime?
  completionstatus   String    @default("pending")

  rating     Int? // Rating from 1 to 5
  review     String? // Optional review text
  reviewedAt DateTime?

  paymentStatus String    @default("pending")
  paymentMethod String?
  paymentAt     DateTime?

  cancellationReason String?
  cancelledAt        DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Review Review[]
}

model Address {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  houseNo    String
  street     String
  city       String
  state      String
  default    Boolean  @default(false)
  postalCode String
  country    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Referral {
  id           String  @id @default(cuid())
  referrerId   String
  refereeId    String  @unique //  This ensures a user can only be referred once
  rewardAmount Int     @default(50)
  isCompleted  Boolean @default(false)

  createdAt DateTime @default(now())

  referrer User @relation("Referrer", fields: [referrerId], references: [id])
  referee  User @relation("Referee", fields: [refereeId], references: [id])
}

model Review {
  id               String         @id @default(cuid())
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  serviceRequestId String
  rating           Int
  review           String
  createdAt        DateTime       @default(now())
}
