generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum AddressType {
  HOME
  OFFICE
  OTHER

}

model User {
  id                String           @id
  email             String           @unique
  firstName         String
  lastName          String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  walletBalance     Int              @default(100) // Wallet balance in currency
  referralCode      String           @unique @default(uuid()) // Unique referral code for each user
  requests          ServiceRequest[]
  servicePartner    ServicePartner?
  role              String           @default("user")
  address           Address[]
  referralsSent     Referral[]       @relation("Referrer") // Users this user referred
  referralsReceived Referral?        @relation("Referee") // Users who referred this user
}

model ServicePartner {
  id                     String                  @id @default(cuid())
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String                  @unique
  experience             Int
  fullName               String
  email                  String                  @unique
  phone                  String
  address                String
  totalServicesCompleted Int                     @default(0)
  rating                 Int                     @default(0)
  pendingServices        Int                     @default(0)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  bio                    String?
  status                 String                  @default("pending")
  upi                    String?
  serviceAreas           String
  idCard                 String? // URL of the uploaded ID card
  serviceRequests        ServiceRequest[]
  servicePartnerServices ServicePartnerService[]
}

model ServicePartnerService {
  id               String         @id @default(cuid())
  servicePartner   ServicePartner @relation(fields: [servicePartnerId], references: [id], onDelete: Cascade)
  servicePartnerId String
  service          Service        @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId        String
  status           String         @default("pending")
  createdAt        DateTime       @default(now())
}

model Service {
  id                     String                  @id @default(cuid())
  name                   String
  description            String?
  category               String
  basePrice              Int
  estimatedTime          String?
  rating                 Float                   @default(0)
  includes               String?
  imageUrl               String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  requests               ServiceRequest[] // Requests for this service
  servicePartnerServices ServicePartnerService[]
}

model ServiceRequest {
  id                 String          @id @default(cuid())
  user               User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  service            Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId          String
  servicePartner     ServicePartner? @relation(fields: [servicePartnerId], references: [id], onDelete: Cascade)
  servicePartnerId   String?
  status             String          @default("pending")
  firstName          String
  lastName           String
  email              String
  phone              String
  acceptedByProvider Boolean         @default(false)
  acceptedAt         DateTime?
  completedAt        DateTime?
  completionstatus   String          @default("pending")

  paymentStatus String @default("pending")
  paymentMethod String

  cancellationReason String?
  cancelledAt        DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Additional fields
  houseNo          String
  street           String
  city             String
  state            String
  postalCode       String
  country          String
  addressType      String
  serviceDate      DateTime // kept as string to match ISO date string usage, could be DateTime if desired
  serviceTime      String
  cartTotal        Int
  tax              Int
  shippingCost     Int
  orderTotal       Int
  walletBalance    Int
  walletAmountUsed Int
  amountToPay      Int
  useWallet        Boolean

  Review Review[]
}

model Address {
  id          String      @id @default(cuid())
  houseNo     String
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  default     Boolean
  addressType AddressType // This field is now of the enum type AddressType
  userId      String
  User        User        @relation(fields: [userId], references: [id])
}

model Referral {
  id           String  @id @default(cuid())
  referrerId   String
  refereeId    String  @unique //  This ensures a user can only be referred once
  rewardAmount Int     @default(50)
  isCompleted  Boolean @default(false)

  createdAt DateTime @default(now())

  referrer User @relation("Referrer", fields: [referrerId], references: [id])
  referee  User @relation("Referee", fields: [refereeId], references: [id])
}

model Review {
  id               String         @id @default(cuid())
  serviceRequest   ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  serviceRequestId String
  rating           Int
  review           String
  status           String         @default("false")
  createdAt        DateTime       @default(now())
}

model Blog {
  id          String   @id @default(uuid()) // Unique identifier
  title       String   @db.VarChar(255) // Blog title
  excerpt     String // Short summary
  content     String // Full HTML content
  image       String // Image URL
  authorName  String // Author name
  authorBio   String // Author bio
  tags        String // Array of tags
  category    String // Category (e.g. Lifestyle, Tech)
  readTime    String // Read time
  publishedAt DateTime @default(now()) // Publish date
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}
